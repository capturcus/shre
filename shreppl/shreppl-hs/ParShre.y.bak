-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.3).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParShre
  ( happyError
  , myLexer
  , pProgram
  , pListFunction
  , pFunction
  , pListFuncArgDecl
  , pFuncArgDecl
  , pStructSelector
  , pSelector
  , pListLetIn
  , pLetIn
  , pExpr
  , pFuncCall
  , pOptionalHash
  , pFuncCallArgList
  ) where

import Prelude

import qualified AbsShre
import LexShre

}

%name pProgram Program
%name pListFunction ListFunction
%name pFunction Function
%name pListFuncArgDecl ListFuncArgDecl
%name pFuncArgDecl FuncArgDecl
%name pStructSelector StructSelector
%name pSelector Selector
%name pListLetIn ListLetIn
%name pLetIn LetIn
%name pExpr Expr
%name pFuncCall FuncCall
%name pOptionalHash OptionalHash
%name pFuncCallArgList FuncCallArgList
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '#'      { PT _ (TS _ 1) }
  '('      { PT _ (TS _ 2) }
  ')'      { PT _ (TS _ 3) }
  '->'     { PT _ (TS _ 4) }
  '.'      { PT _ (TS _ 5) }
  ':'      { PT _ (TS _ 6) }
  ';'      { PT _ (TS _ 7) }
  '|'      { PT _ (TS _ 8) }
  L_Ident  { PT _ (TV $$)  }
  L_doubl  { PT _ (TD $$)  }
  L_integ  { PT _ (TI $$)  }
  L_quoted { PT _ (TL $$)  }

%%

Ident :: { AbsShre.Ident }
Ident  : L_Ident { AbsShre.Ident $1 }

Double  :: { Double }
Double   : L_doubl  { (read $1) :: Double }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { AbsShre.Program }
Program : ListFunction { AbsShre.ProgramRoot $1 }

ListFunction :: { [AbsShre.Function] }
ListFunction
  : {- empty -} { [] }
  | Function { (:[]) $1 }
  | Function ';' ListFunction { (:) $1 $3 }

Function :: { AbsShre.Function }
Function
  : Ident ListFuncArgDecl '->' Ident ':' ListLetIn { AbsShre.Function1 $1 $2 $4 $6 }
  | Ident ListFuncArgDecl ':' ListLetIn { AbsShre.Function2 $1 $2 $4 }

ListFuncArgDecl :: { [AbsShre.FuncArgDecl] }
ListFuncArgDecl
  : {- empty -} { [] } | FuncArgDecl ListFuncArgDecl { (:) $1 $2 }

FuncArgDecl :: { AbsShre.FuncArgDecl }
FuncArgDecl : Ident { AbsShre.FuncArgDeclIdent $1 }

StructSelector :: { AbsShre.StructSelector }
StructSelector
  : Ident { AbsShre.StructSelectorIdent $1 }
  | StructSelector '.' Ident { AbsShre.StructSelector1 $1 $3 }

Selector :: { AbsShre.Selector }
Selector
  : StructSelector { AbsShre.SelectorStructSelector $1 }
  | Ident ':' StructSelector { AbsShre.Selector1 $1 $3 }

ListLetIn :: { [AbsShre.LetIn] }
ListLetIn
  : {- empty -} { [] }
  | LetIn { (:[]) $1 }
  | LetIn ';' ListLetIn { (:) $1 $3 }

LetIn :: { AbsShre.LetIn }
LetIn : Ident { AbsShre.LetInIdent $1 }

Expr :: { AbsShre.Expr }
Expr
  : Integer { AbsShre.ExprInt $1 }
  | Double { AbsShre.ExprDouble $1 }
  | String { AbsShre.ExprString $1 }
  | FuncCall OptionalHash { AbsShre.ExprFuncCall $1 $2 }
  | '(' Expr ')' { AbsShre.ExprParen $2 }
  | Expr '|' Expr { AbsShre.ExprPipe $1 $3 }

FuncCall :: { AbsShre.FuncCall }
FuncCall : Selector FuncCallArgList { AbsShre.FuncCall1 $1 $2 }

OptionalHash :: { AbsShre.OptionalHash }
OptionalHash
  : {- empty -} { AbsShre.OptionalHash1 }
  | '#' { AbsShre.OptionalHash2 }

FuncCallArgList :: { AbsShre.FuncCallArgList }
FuncCallArgList
  : Expr FuncCallArgList { AbsShre.FuncCallArgListContinue $1 $2 }
  | Expr { AbsShre.FuncCallArgListExpr $1 }
  | {- empty -} { AbsShre.FuncCallArgListEnd }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

