-- File generated by the BNF Converter (bnfc 2.9.3).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelShre where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsShre

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsShre.Ident -> Result
transIdent x = case x of
  AbsShre.Ident string -> failure x

transProgram :: AbsShre.Program -> Result
transProgram x = case x of
  AbsShre.ProgramRoot functions -> failure x

transFunction :: AbsShre.Function -> Result
transFunction x = case x of
  AbsShre.Function1 ident1 funcargdecls ident2 letins -> failure x
  AbsShre.Function2 ident funcargdecls letins -> failure x

transFuncArgDecl :: AbsShre.FuncArgDecl -> Result
transFuncArgDecl x = case x of
  AbsShre.FuncArgDeclIdent ident -> failure x

transStructSelector :: AbsShre.StructSelector -> Result
transStructSelector x = case x of
  AbsShre.StructSelectorIdent ident -> failure x
  AbsShre.StructSelector1 structselector ident -> failure x

transSelector :: AbsShre.Selector -> Result
transSelector x = case x of
  AbsShre.SelectorStructSelector structselector -> failure x
  AbsShre.Selector1 ident structselector -> failure x

transLetIn :: AbsShre.LetIn -> Result
transLetIn x = case x of
  AbsShre.LetInIdent ident -> failure x

transExpr :: AbsShre.Expr -> Result
transExpr x = case x of
  AbsShre.ExprInt integer -> failure x
  AbsShre.ExprDouble double -> failure x
  AbsShre.ExprString string -> failure x
  AbsShre.ExprFuncCall funccall optionalhash -> failure x
  AbsShre.ExprParen expr -> failure x
  AbsShre.ExprPipe expr1 expr2 -> failure x

transFuncCall :: AbsShre.FuncCall -> Result
transFuncCall x = case x of
  AbsShre.FuncCall1 selector funccallarglist -> failure x

transOptionalHash :: AbsShre.OptionalHash -> Result
transOptionalHash x = case x of
  AbsShre.OptionalHash1 -> failure x
  AbsShre.OptionalHash2 -> failure x

transFuncCallArgList :: AbsShre.FuncCallArgList -> Result
transFuncCallArgList x = case x of
  AbsShre.FuncCallArgListContinue expr funccallarglist -> failure x
  AbsShre.FuncCallArgListExpr expr -> failure x
  AbsShre.FuncCallArgListEnd -> failure x
