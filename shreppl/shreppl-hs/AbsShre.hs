-- File generated by the BNF Converter (bnfc 2.9.3).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language shre.

module AbsShre where

import Prelude (Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = ProgramRoot [Function]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Function
    = Function1 Ident [FuncArgDecl] [FuncArgDecl] [LetIn]
    | Function2 Ident [FuncArgDecl] [LetIn]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FuncArgDecl = FuncArgDeclIdent Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StructSelector
    = StructSelectorIdent Ident | StructSelector1 StructSelector Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Selector
    = SelectorStructSelector StructSelector
    | Selector1 Ident StructSelector
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LetIn = LetIn1 Selector Expr | LetInExpr Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = ExprInt Integer
    | ExprDouble Double
    | ExprString String
    | ExprFuncCall FuncCall
    | ExprParen Expr
    | ExprPipe Expr Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FuncCall
    = FuncCall1 Selector FuncCallArgList
    | FuncCall2 Selector FuncCallArgList
    | FuncCall3 Selector
    | FuncCallSelector Selector
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FuncCallArgList
    = FuncCallArgListContinue Expr FuncCallArgList
    | FuncCallArgListExpr Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

