ProgramRoot. Program ::= [TopLevelDeclaration] ;

separator TopLevelDeclaration "ENDLINE" ;

rules TopLevelDeclaration ::= FunctionDeclaration | StructDeclaration | VariantDeclaration ;

rules FunctionDeclaration ::= Ident [FuncArgDecl] "->" Type ":" "ENDLINE" "INDENT" [LetIn] "DEDENT" | Ident [FuncArgDecl] ":" "ENDLINE" "INDENT" [LetIn] "DEDENT" ;
separator nonempty FuncArgDecl "";
rules FuncArgDecl ::= Ident | Ident "~" Type ;
rules Type ::= Ident | Type Ident ;

rules StructSelector ::= Ident | StructSelector "." Ident ;

rules PackageQualifier ::= 
    | PackageQualifier Ident "." ;

rules Selector ::= PackageQualifier StructSelector | StructSelector ;

separator LetIn "ENDLINE" ;

rules LetIn ::= 
      Selector "=" Expr
    | Expr ;

ExprMatch. Expr ::= "match" Expr ":" "ENDLINE" "INDENT" [MatchArm] "DEDENT" ;
ExprInt. Expr ::= Integer ;
ExprDouble. Expr ::= Double ;
ExprString. Expr ::= String ;
ExprFuncCall. Expr ::= FuncCall ;
ExprParen. Expr ::= "(" Expr ")" ;
ExprPipe. Expr ::= Expr "|" Expr ;
ExprSimpleLambda. Expr ::= "${" [LetIn] "}" ;
ExprArrayElem. Expr ::= Expr "[" Expr "]" ;
ExprArgumentedLambda. Expr ::= "$" [FuncArgDecl] "{" [LetIn] "}" ;

separator MatchArm "" ;
rules MatchArm ::= Ident Ident ":" "ENDLINE" "INDENT" [LetIn] "DEDENT" ; -- A variant name and the variable declaration, there will be deconstruction here later

rules FuncCall ::= 
     Selector FuncCallArgList "#" 
    | Selector FuncCallArgList 
    | Selector "#"
    | Selector ;
FuncCallArgListContinue. FuncCallArgList ::= Expr FuncCallArgList ;
FuncCallArgListExpr. FuncCallArgList ::= Expr ;

rules StructDeclaration ::= "struct" Ident ":" "ENDLINE" "INDENT" [StructDeclarations] "DEDENT" ;
rules StructDeclarations ::= Ident ":" Type ;
separator StructDeclarations "ENDLINE" ;

rules VariantDeclaration ::= "variant" Ident ":" "ENDLINE" "INDENT" [VariantDeclarations] "DEDENT" ;

rules VariantDeclarations ::= Ident ":" Type ;
separator VariantDeclarations "ENDLINE" ;
