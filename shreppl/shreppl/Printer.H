/* File generated by the BNF Converter (bnfc 2.9.3). */

#ifndef PRINTER_HEADER
#define PRINTER_HEADER

#include "Absyn.H"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>


/* Certain applications may improve performance by changing the buffer size */
#define BUFFER_INITIAL 2000
/* You may wish to change _L_PAREN or _R_PAREN */
#define _L_PAREN '('
#define _R_PAREN ')'

class PrintAbsyn : public Visitor
{
 protected:
  int _n_, _i_;
  /* The following are simple heuristics for rendering terminals */
  /* You may wish to change them */
  void render(Char c);
  void render(String s);
  void render(const char *s);
  void indent(void);
  void backup(void);
  void onEmptyLine(void);
  void removeTrailingSpaces(void);
  void removeTrailingWhitespace(void);
 public:
  PrintAbsyn(void);
  ~PrintAbsyn(void);
  char *print(Visitable *v);

  void visitProgram(Program *p); /* abstract class */
  void visitProgramFunction(ProgramFunction *p);
  void visitProgram1(Program1 *p);
  void visitFunction(Function *p); /* abstract class */
  void visitFunction1(Function1 *p);
  void visitArgList(ArgList *p); /* abstract class */
  void visitArgListIdent(ArgListIdent *p);
  void visitArgList1(ArgList1 *p);
  void visitLetIns(LetIns *p); /* abstract class */
  void visitLetIns1(LetIns1 *p);
  void visitLetIns2(LetIns2 *p);
  void visitOptionalHash(OptionalHash *p); /* abstract class */
  void visitOptionalHash1(OptionalHash1 *p);
  void visitOptionalHash2(OptionalHash2 *p);
  void visitLetIn(LetIn *p); /* abstract class */
  void visitLetIn1(LetIn1 *p);
  void visitLetInExpr(LetInExpr *p);
  void visitExpr(Expr *p); /* abstract class */
  void visitExprIdent(ExprIdent *p);
  void visitExprInteger(ExprInteger *p);
  void visitExprDouble(ExprDouble *p);
  void visitExprString(ExprString *p);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
 protected:
  char *buf_;
  int cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    int end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) free(buf_);
    buf_size = BUFFER_INITIAL;
    buf_ = (char *) malloc(buf_size);
    if (!buf_) {
      fprintf(stderr, "Error: Out of memory while allocating buffer!\n");
      exit(1);
    }
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = (char *) malloc(buf_size);
    if (!temp)
    {
      fprintf(stderr, "Error: Out of memory while attempting to grow buffer!\n");
      exit(1);
    }
    if (buf_)
    {
      strcpy(temp, buf_);
      free(buf_);
    }
    buf_ = temp;
  }
};



class ShowAbsyn : public Visitor
{
 public:
  ShowAbsyn(void);
  ~ShowAbsyn(void);
  char *show(Visitable *v);

  void visitProgram(Program *p); /* abstract class */
  void visitProgramFunction(ProgramFunction *p);
  void visitProgram1(Program1 *p);
  void visitFunction(Function *p); /* abstract class */
  void visitFunction1(Function1 *p);
  void visitArgList(ArgList *p); /* abstract class */
  void visitArgListIdent(ArgListIdent *p);
  void visitArgList1(ArgList1 *p);
  void visitLetIns(LetIns *p); /* abstract class */
  void visitLetIns1(LetIns1 *p);
  void visitLetIns2(LetIns2 *p);
  void visitOptionalHash(OptionalHash *p); /* abstract class */
  void visitOptionalHash1(OptionalHash1 *p);
  void visitOptionalHash2(OptionalHash2 *p);
  void visitLetIn(LetIn *p); /* abstract class */
  void visitLetIn1(LetIn1 *p);
  void visitLetInExpr(LetInExpr *p);
  void visitExpr(Expr *p); /* abstract class */
  void visitExprIdent(ExprIdent *p);
  void visitExprInteger(ExprInteger *p);
  void visitExprDouble(ExprDouble *p);
  void visitExprString(ExprString *p);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
 protected:
  char *buf_;
  int cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    int end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) free(buf_);
    buf_size = BUFFER_INITIAL;
    buf_ = (char *) malloc(buf_size);
    if (!buf_) {
      fprintf(stderr, "Error: Out of memory while allocating buffer!\n");
      exit(1);
    }
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = (char *) malloc(buf_size);
    if (!temp)
    {
      fprintf(stderr, "Error: Out of memory while attempting to grow buffer!\n");
      exit(1);
    }
    if (buf_)
    {
      strcpy(temp, buf_);
      free(buf_);
    }
    buf_ = temp;
  }
};




#endif

